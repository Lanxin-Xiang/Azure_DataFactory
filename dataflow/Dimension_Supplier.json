{
	"name": "Dimension_Supplier",
	"properties": {
		"description": "[Supplier Key]\n      ,[WWI Supplier ID]\n      ,[Supplier]\n      ,[Category]\n      ,[Primary Contact]\n      ,[Supplier Reference]\n      ,[Payment Days]\n      ,[Postal Code]\n      ,[Valid From]\n      ,[Valid To]\n      ,[Lineage Key]",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SuppliersODS",
						"type": "DatasetReference"
					},
					"name": "SuppliersODS"
				},
				{
					"dataset": {
						"referenceName": "SupplierCategories",
						"type": "DatasetReference"
					},
					"name": "SupplierCategories"
				},
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "People"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DimensionSupplier",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "SupplierKey"
				},
				{
					"name": "derivedLineageKey"
				},
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "join1"
				},
				{
					"name": "select3"
				},
				{
					"name": "join2"
				},
				{
					"name": "AlterRow1"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          SupplierID as integer,",
				"          SupplierName as string,",
				"          SupplierCategoryID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          SupplierReference as string,",
				"          BankAccountName as string,",
				"          BankAccountBranch as string,",
				"          BankAccountCode as string,",
				"          BankAccountNumber as string,",
				"          BankInternationalCode as string,",
				"          PaymentDays as integer,",
				"          InternalComments as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as binary,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestDatetime as string,",
				"          Skey as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SuppliersODS",
				"source(output(",
				"          SupplierCategoryID as integer,",
				"          SupplierCategoryName as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> SupplierCategories",
				"source(output(",
				"          PersonID as integer,",
				"          FullName as string,",
				"          PreferredName as string,",
				"          SearchName as string,",
				"          IsPermittedToLogon as boolean,",
				"          LogonName as string,",
				"          IsExternalLogonProvider as boolean,",
				"          HashedPassword as binary,",
				"          IsSystemUser as boolean,",
				"          IsEmployee as boolean,",
				"          IsSalesperson as boolean,",
				"          UserPreferences as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          EmailAddress as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          OtherLanguages as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> People",
				"SuppliersODS keyGenerate(output({Supplier Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> SupplierKey",
				"SupplierKey derive({Lineage Key} = toInteger(year(currentTimestamp())-year({ValidFrom}))) ~> derivedLineageKey",
				"derivedColumn1 select(mapColumn(",
				"          {Supplier Key},",
				"          WWISupplierID = SupplierID,",
				"          Supplier = SupplierName,",
				"          Category = SupplierCategoryName,",
				"          {Primary Contact} = FullName,",
				"          {Supplier Reference} = SupplierReference,",
				"          {Payment Days} = PaymentDays,",
				"          {Postal Code} = PostalPostalCode,",
				"          {Valid From} = ValidFrom,",
				"          {Valid To} = ValidTo,",
				"          {Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"SupplierCategories select(mapColumn(",
				"          SupplierCategoryID,",
				"          SupplierCategoryName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"derivedLineageKey, select2 join(SuppliersODS@SupplierCategoryID == select2@SupplierCategoryID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"People select(mapColumn(",
				"          PersonID,",
				"          FullName",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"join1, select3 join(PrimaryContactPersonID == PersonID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"select1 alterRow(upsertIf(true())) ~> AlterRow1",
				"join2 derive({Supplier Key} = toInteger({Supplier Key})) ~> derivedColumn1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Supplier Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['WWI Supplier ID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Supplier Key},",
				"          {WWI Supplier ID} = WWISupplierID,",
				"          Supplier,",
				"          Category,",
				"          {Primary Contact},",
				"          {Supplier Reference},",
				"          {Payment Days},",
				"          {Postal Code},",
				"          {Valid From},",
				"          {Valid To},",
				"          {Lineage Key}",
				"     )) ~> sink1"
			]
		}
	}
}