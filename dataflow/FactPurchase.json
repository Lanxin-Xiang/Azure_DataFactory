{
	"name": "FactPurchase",
	"properties": {
		"description": "[Purchase Key]\n      ,[Date Key]\n      ,[Supplier Key]\n      ,[Stock Item Key]\n      ,[WWI Purchase Order ID]\n      ,[Ordered Outers]\n      ,[Ordered Quantity]\n      ,[Received Outers]\n      ,[Package]\n      ,[Is Order Finalized]\n      ,[Lineage Key]",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DimensionSupplier",
						"type": "DatasetReference"
					},
					"name": "DimensionSupplier"
				},
				{
					"dataset": {
						"referenceName": "IntegrationOrderStaging",
						"type": "DatasetReference"
					},
					"name": "IntegrationOrderStaging"
				},
				{
					"dataset": {
						"referenceName": "IntegrationStockItemStaging",
						"type": "DatasetReference"
					},
					"name": "IntegrationStockItemStaging"
				},
				{
					"dataset": {
						"referenceName": "IntegrationPurchaseStaging",
						"type": "DatasetReference"
					},
					"name": "IntegrationPurchaseStaging"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "FactPurchase",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "select2"
				},
				{
					"name": "surrogateKey1"
				},
				{
					"name": "join1"
				},
				{
					"name": "select3"
				},
				{
					"name": "join2"
				},
				{
					"name": "select4"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "join3"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Supplier Key} as integer,",
				"          {WWI Supplier ID} as integer,",
				"          Supplier as string,",
				"          Category as string,",
				"          {Primary Contact} as string,",
				"          {Supplier Reference} as string,",
				"          {Payment Days} as integer,",
				"          {Postal Code} as string,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp,",
				"          {Lineage Key} as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> DimensionSupplier",
				"source(output(",
				"          {Order Staging Key} as long,",
				"          {City Key} as integer,",
				"          {Customer Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {Order Date Key} as date,",
				"          {Picked Date Key} as date,",
				"          {Salesperson Key} as integer,",
				"          {Picker Key} as integer,",
				"          {WWI Order ID} as integer,",
				"          {WWI Backorder ID} as integer,",
				"          Description as string,",
				"          Package as string,",
				"          Quantity as integer,",
				"          {Unit Price} as decimal(18,2),",
				"          {Tax Rate} as decimal(18,3),",
				"          {Total Excluding Tax} as decimal(18,2),",
				"          {Tax Amount} as decimal(18,2),",
				"          {Total Including Tax} as decimal(18,2),",
				"          {Lineage Key} as integer,",
				"          {WWI City ID} as integer,",
				"          {WWI Customer ID} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {WWI Salesperson ID} as integer,",
				"          {WWI Picker ID} as integer,",
				"          {Last Modified When} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> IntegrationOrderStaging",
				"source(output(",
				"          {Stock Item Staging Key} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Stock Item} as string,",
				"          Color as string,",
				"          {Selling Package} as string,",
				"          {Buying Package} as string,",
				"          Brand as string,",
				"          Size as string,",
				"          {Lead Time Days} as integer,",
				"          {Quantity Per Outer} as integer,",
				"          {Is Chiller Stock} as boolean,",
				"          Barcode as string,",
				"          {Tax Rate} as decimal(18,3),",
				"          {Unit Price} as decimal(18,2),",
				"          {Recommended Retail Price} as decimal(18,2),",
				"          {Typical Weight Per Unit} as decimal(18,3),",
				"          Photo as binary,",
				"          {Valid From} as timestamp,",
				"          {Valid To} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> IntegrationStockItemStaging",
				"source(output(",
				"          {Purchase Staging Key} as long,",
				"          {Date Key} as date,",
				"          {Supplier Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {WWI Purchase Order ID} as integer,",
				"          {Ordered Outers} as integer,",
				"          {Ordered Quantity} as integer,",
				"          {Received Outers} as integer,",
				"          Package as string,",
				"          {Is Order Finalized} as boolean,",
				"          {WWI Supplier ID} as integer,",
				"          {WWI Stock Item ID} as integer,",
				"          {Last Modified When} as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> IntegrationPurchaseStaging",
				"surrogateKey1 select(mapColumn(",
				"          {Purchase Key},",
				"          {Supplier Key},",
				"          {WWI Supplier ID},",
				"          Supplier,",
				"          Category,",
				"          {Primary Contact},",
				"          {Supplier Reference},",
				"          {Payment Days},",
				"          {Postal Code},",
				"          {Lineage Key} = DimensionSupplier@{Lineage Key}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"join2 keyGenerate(output({Purchase Key} as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> surrogateKey1",
				"IntegrationOrderStaging, IntegrationStockItemStaging join(IntegrationOrderStaging@{WWI Stock Item ID} == IntegrationStockItemStaging@{WWI Stock Item ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 select(mapColumn(",
				"          {Stock Item Key},",
				"          {Order Date Key},",
				"          {WWI Order ID},",
				"          Quantity,",
				"          {Lineage Key},",
				"          {WWI Stock Item ID} = IntegrationOrderStaging@{WWI Stock Item ID}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"DimensionSupplier, select3 join(ERROR_FUNCTION('') == {WWI Stock Item ID},",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"select5 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select4",
				"select6 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"join3 select(skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"IntegrationPurchaseStaging join(joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          {Purchase Key} as long,",
				"          {Date Key} as date,",
				"          {Supplier Key} as integer,",
				"          {Stock Item Key} as integer,",
				"          {WWI Purchase Order ID} as integer,",
				"          {Ordered Outers} as integer,",
				"          {Ordered Quantity} as integer,",
				"          {Received Outers} as integer,",
				"          Package as string,",
				"          {Is Order Finalized} as boolean,",
				"          {Lineage Key} as integer",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          {Purchase Key},",
				"          {Supplier Key},",
				"          {Lineage Key}",
				"     )) ~> sink1"
			]
		}
	}
}