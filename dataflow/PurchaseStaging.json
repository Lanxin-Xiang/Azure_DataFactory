{
	"name": "PurchaseStaging",
	"properties": {
		"description": "[Purchase Staging Key]\n      ,[Date Key]\n      ,[Supplier Key]\n      ,[Stock Item Key]\n      ,[WWI Purchase Order ID]\n      ,[Ordered Outers]\n      ,[Ordered Quantity]\n      ,[Received Outers]\n      ,[Package]\n      ,[Is Order Finalized]\n      ,[WWI Supplier ID]\n      ,[WWI Stock Item ID]\n      ,[Last Modified When]",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "PurchaseOrdersODS",
						"type": "DatasetReference"
					},
					"name": "PurchaseOrders"
				},
				{
					"dataset": {
						"referenceName": "PurchaseOrderLinesODS",
						"type": "DatasetReference"
					},
					"name": "PurchaseOrderLines"
				},
				{
					"dataset": {
						"referenceName": "SuppliersODS",
						"type": "DatasetReference"
					},
					"name": "Suppliers"
				},
				{
					"dataset": {
						"referenceName": "StockItems",
						"type": "DatasetReference"
					},
					"name": "StockItems"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "AzureSqlTable2",
						"type": "DatasetReference"
					},
					"name": "sinkPurchaseStaging"
				}
			],
			"transformations": [
				{
					"name": "select1"
				},
				{
					"name": "select2"
				},
				{
					"name": "select3"
				},
				{
					"name": "join1"
				},
				{
					"name": "join2"
				},
				{
					"name": "WWIStockItemID"
				},
				{
					"name": "join3"
				},
				{
					"name": "select5"
				},
				{
					"name": "select6"
				},
				{
					"name": "derivedOrderedQuantity"
				},
				{
					"name": "addPurchaseStagingKey"
				}
			],
			"scriptLines": [
				"source(output(",
				"          PurchaseOrderID as integer,",
				"          SupplierID as integer,",
				"          OrderDate as date,",
				"          DeliveryMethodID as integer,",
				"          ContactPersonID as integer,",
				"          ExpectedDeliveryDate as date,",
				"          SupplierReference as string,",
				"          IsOrderFinalized as boolean,",
				"          Comments as string,",
				"          InternalComments as string,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp,",
				"          IngestDatetime as string,",
				"          Skey as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> PurchaseOrders",
				"source(output(",
				"          PurchaseOrderLineID as integer,",
				"          PurchaseOrderID as integer,",
				"          StockItemID as integer,",
				"          OrderedOuters as integer,",
				"          Description as string,",
				"          ReceivedOuters as integer,",
				"          PackageTypeID as integer,",
				"          ExpectedUnitPricePerOuter as decimal(18,2),",
				"          LastReceiptDate as date,",
				"          IsOrderLineFinalized as boolean,",
				"          LastEditedBy as integer,",
				"          LastEditedWhen as timestamp,",
				"          Skey as integer,",
				"          IngestDatetime as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> PurchaseOrderLines",
				"source(output(",
				"          SupplierID as integer,",
				"          SupplierName as string,",
				"          SupplierCategoryID as integer,",
				"          PrimaryContactPersonID as integer,",
				"          AlternateContactPersonID as integer,",
				"          DeliveryMethodID as integer,",
				"          DeliveryCityID as integer,",
				"          PostalCityID as integer,",
				"          SupplierReference as string,",
				"          BankAccountName as string,",
				"          BankAccountBranch as string,",
				"          BankAccountCode as string,",
				"          BankAccountNumber as string,",
				"          BankInternationalCode as string,",
				"          PaymentDays as integer,",
				"          InternalComments as string,",
				"          PhoneNumber as string,",
				"          FaxNumber as string,",
				"          WebsiteURL as string,",
				"          DeliveryAddressLine1 as string,",
				"          DeliveryAddressLine2 as string,",
				"          DeliveryPostalCode as string,",
				"          DeliveryLocation as binary,",
				"          PostalAddressLine1 as string,",
				"          PostalAddressLine2 as string,",
				"          PostalPostalCode as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp,",
				"          IngestDatetime as string,",
				"          Skey as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> Suppliers",
				"source(output(",
				"          StockItemID as integer,",
				"          StockItemName as string,",
				"          SupplierID as integer,",
				"          ColorID as integer,",
				"          UnitPackageID as integer,",
				"          OuterPackageID as integer,",
				"          Brand as string,",
				"          Size as string,",
				"          LeadTimeDays as integer,",
				"          QuantityPerOuter as integer,",
				"          IsChillerStock as boolean,",
				"          Barcode as string,",
				"          TaxRate as decimal(18,3),",
				"          UnitPrice as decimal(18,2),",
				"          RecommendedRetailPrice as decimal(18,2),",
				"          TypicalWeightPerUnit as decimal(18,3),",
				"          MarketingComments as string,",
				"          InternalComments as string,",
				"          Photo as binary,",
				"          CustomFields as string,",
				"          Tags as string,",
				"          SearchDetails as string,",
				"          LastEditedBy as integer,",
				"          ValidFrom as timestamp,",
				"          ValidTo as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> StockItems",
				"PurchaseOrders select(mapColumn(",
				"          WWIPurchaseOrderID = PurchaseOrderID,",
				"          WWISupplierID = SupplierID,",
				"          SupplierKey = Skey,",
				"          OrderDate,",
				"          LastEditedWhen,",
				"          WWIIngestDatetime = IngestDatetime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"PurchaseOrderLines select(mapColumn(",
				"          PurchaseOrderLineID,",
				"          PurchaseOrderID,",
				"          WWIStockItemID = StockItemID,",
				"          StockItemKey = Skey,",
				"          OrderedOuters,",
				"          ReceivedOuters,",
				"          IsOrderLineFinalized,",
				"          IngestDatetime",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"Suppliers select(mapColumn(",
				"          WWISupplierID = SupplierID,",
				"          IngestDatetime,",
				"          SupplierKey = Skey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select3",
				"select1, select2 join(WWIPurchaseOrderID == PurchaseOrderID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join3, select3 join(select1@WWISupplierID == select3@WWISupplierID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join2",
				"select5 keyGenerate(output(WWIStockItemID as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> WWIStockItemID",
				"join1, WWIStockItemID join(select2@WWIStockItemID == StockItemID,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join3",
				"StockItems select(mapColumn(",
				"          StockItemID,",
				"          OuterPackageID,",
				"          QuantityPerOuter",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select5",
				"addPurchaseStagingKey select(mapColumn(",
				"          PurchaseStagingKey,",
				"          DateKey = OrderDate,",
				"          SupplierKey = select1@WWISupplierID,",
				"          StockItemKey = select2@WWIStockItemID,",
				"          WWIPurchaseOrderID = select1@WWISupplierID,",
				"          OrderedOuters,",
				"          OrderedQuantity,",
				"          ReceivedOuters,",
				"          Package = OuterPackageID,",
				"          IsOrderLineFinalized,",
				"          WWISupplierID = select3@SupplierKey,",
				"          WWIStockItemID = WWIStockItemID@WWIStockItemID,",
				"          LastModifiedWhen = LastEditedWhen",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select6",
				"join2 derive(OrderedQuantity = QuantityPerOuter*OrderedOuters) ~> derivedOrderedQuantity",
				"derivedOrderedQuantity keyGenerate(output(PurchaseStagingKey as long),",
				"     startAt: 1L,",
				"     stepValue: 1L) ~> addPurchaseStagingKey",
				"select6 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sinkPurchaseStaging"
			]
		}
	}
}